// Each #kernel tells which function to compile; you can have many kernels
#pragma editor_sync_compilation
#define THREAD_GROUP_SIZE 128

#define EPSILON 0.000001

#define DT 0.001

const float3 e = float3(1, -1, 0);
const float d = 0.999;
const float c = 1.4;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
StructuredBuffer<float3> _inputMesh;
StructuredBuffer<float3> _inputColors;
RWStructuredBuffer<float3> _outputColors;
RWStructuredBuffer<float3> _outputMesh;
StructuredBuffer<int> _inputVertexNeighbours;
StructuredBuffer<int> _inputValence;
int _inputMaxValence;

float cotan_angle(float3 pi, float3 pj, float3 pk)
{
    float3 a = normalize(pi - pk);
    float3 b = normalize(pj - pk);
    float x = tan(acos(min(1.0, max(-1.0, dot(a, b)))));
    return 1 / (x + EPSILON);
}

int mod(int x, int m) {
    return (x % m + m) % m;
}

#pragma kernel CSLaplacian
[numthreads(THREAD_GROUP_SIZE,1,1)]
void CSLaplacian (uint3 id : SV_DispatchThreadID)
{
    uint uid = id.x;
    float3 lap = float3(0,0,0);
    int valence = _inputValence[uid];
    float3 pi = _inputMesh[uid];
    float3 inputColor = _inputColors[uid]; 
    float weights = 0;
    float area = 0;
    for (int i = 0; i < valence; i++)
    {
        int neighbor = _inputVertexNeighbours[uid*_inputMaxValence+i];
        float3 pj = _inputMesh[neighbor];
        float3 ka = _inputMesh[_inputVertexNeighbours[uid*_inputMaxValence+mod((i-1),valence)]];
        float3 kb = _inputMesh[_inputVertexNeighbours[uid*_inputMaxValence+mod((i+1),valence)]];
        float3 neighborColor = _inputColors[neighbor];
        float a = cotan_angle(pi, pj, ka);
        float b = cotan_angle(pi, pj, kb);
        float ab = a + b;
        weights += ab;
        lap += ab*neighborColor;
        float3 ij = pj - pi;
        float3 ik = ka - pi;
        float ar = length(cross(ij, ik));
        float angle = asin(ar / (length(ij) * length(ik) + EPSILON));
        area += ar*angle; // ar/3.0;
    }

    // float Da = 1.0;
    // float Db = 0.5;
    // float k = 0.0649;
    // float f = 0.0367;

    float Da = 1.0;
    float Db = 0.5;
    float k = 0.062;
    float f = 0.0545;

    lap -= weights*inputColor;
    lap /= area;
    float3 v = inputColor;
    float2 ab = v.xy + (float2(Da, Db) * lap.xy + e.yx*v.x*v.y*v.y + e.xy*float2(f*(1.0 - v.x), (k + f)*v.y)) * DT;
    ab = max(0.0, min(1.0, ab));
    // float3 v = inputColor;
    // float s = v.x*d + d * c*c * lap.y * DT;
    // float h = v.y + s * DT;
    _outputColors[uid] = float3(ab, 0);
    // _outputColors[uid] = lap;//float3(s, h, 0);
    // _outputColors[uid] = max(0.0, min(1.0, inputColor + DT*lap));
}
