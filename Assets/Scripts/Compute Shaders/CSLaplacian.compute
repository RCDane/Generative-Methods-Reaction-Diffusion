// Each #kernel tells which function to compile; you can have many kernels
#pragma editor_sync_compilation
#define THREAD_GROUP_SIZE 128

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float3> _inputMesh;
RWStructuredBuffer<float3> _outputMesh;
RWStructuredBuffer<int> _inputVertexNeighbours;
RWStructuredBuffer<int> _inputValence;
int _inputMaxValence;

float cotan_angle(float3 pi, float3 pj, float3 pk)
{
    float3 a = normalize(pi - pk);
    float3 b = normalize(pj - pk);
    float x = tan(acos(min(1.0, max(-1.0, dot(a, b)))));
    return 1 / (x + 0.000001);
}

int mod(int x, int m) {
    return (x % m + m) % m;
}

#pragma kernel CSLaplacian
[numthreads(THREAD_GROUP_SIZE,1,1)]
void CSLaplacian (uint3 id : SV_DispatchThreadID)
{
    uint uid = id.x;
    float3 pos = float3(0,0,0);
    int valence = _inputValence[uid];
    float3 pi = _inputMesh[uid];
    float res = 0;
    float area = 0;
    for (int i = 0; i < valence; i++)
    {
        float3 pj = _inputMesh[_inputVertexNeighbours[uid*_inputMaxValence+i]];
        float3 ka = _inputMesh[_inputVertexNeighbours[uid*_inputMaxValence+mod((i-1),valence)]];
        float3 kb =  _inputMesh[_inputVertexNeighbours[uid*_inputMaxValence+mod((i+1),valence)]];
        float a = cotan_angle(pi, pj, ka);
        float b = cotan_angle(pi, pj, kb);
        float ab = a + b;
        res += ab;
        pos += ab*pj;
        float3 ij = pj - pi;
        float3 ik = ka - pi;
        float ar = length(cross(ij, ik));
        float angle = asin(ar / (length(ij) * length(ik) + 0.000001));
        area += ar*angle;
    }

    pos -= res*pi;
    pos /= area;
    _outputMesh[uid] = pi + 0.0001*pos;
}
